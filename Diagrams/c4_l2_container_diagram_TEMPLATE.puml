@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml

AddElementTag("microService", $shape=EightSidedShape(), $bgColor="CornflowerBlue", $fontColor="white", $legendText="micro service\neight sided")
AddElementTag("storage", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")
AddRelTag(aggregate_root, $lineColor="red")

LAYOUT_TOP_DOWN()
'LAYOUT_WITH_LEGEND()
SHOW_PERSON_OUTLINE()
'HIDE_STEREOTYPE()

title Container Diagram for Car Dealership System

Person(employee, "Employee", "Employee of the car dealership")
System_Boundary(cardealership, "Car Dealership System"){
    Container(webapp, "Web Application", "JavaScript, React", "Delivers the static content and the car dealership single page application.")
    Container(singlepage_app, "Single-Page Application", "JavaScript, React", "Provides the car dealership functionaltiy to employees via their browser.")
    Container(api_gateway, "API Gateway", "Java, Spring Boot", "Proovides car dealership functionaltiy via a JSON/REST HTTPS API")
    Container(purchases_service, "purchases-service",  "Java, Spring Boot", "Provides purchases functionality using the aggregator pattern via a JSON/REST HTTPS API", $tags =  microService)
    Container(inventory_service, "inventory-service",  "Java, Spring Boot", "Provides inventory functionality via a JSON/REST HTTPS API", $tags =  microService)
    Container(employees_service, "employees-service",  "Java, Spring Boot", "Provides employees functionality via a JSON/REST HTTPS API", $tags =  microService)
    Container(customers_service, "customers-service",  "Java, Spring Boot", "Provides customers functionality via a JSON/REST HTTPS API", $tags =  microService)
    ContainerDb(customers_db, "Customers DB", "MySQL 5.5.x", "Stores customer information.", $tags = "storage")
    ContainerDb(employees_db, "Employees DB", "MySQL 5.5.x", "Stores employee information.", $tags = "storage")
    ContainerDb(inventory_db, "Inventory DB", "Postgres", "Stores inventory information.", $tags = "storage")
    ContainerDb(purchases_db, "Purchases DB", "Mongo DB", "Stores purchase information.", $tags = "storage")

    Rel(employee, webapp, "Visits cardealership.com using", "HTTTPS")
    Rel_R(webapp, singlepage_app, "Delivers to the employee's browser")
    Rel(employee, singlepage_app, "views inventory and tracks purchases using", "HTTPS")
    Rel(singlepage_app, api_gateway, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, customers_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, employees_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, inventory_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(api_gateway, purchases_service, "Makes API calls to", "JSON/REST/HTTPS")

    Rel(purchases_service, customers_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(purchases_service, inventory_service, "Makes API calls to", "JSON/REST/HTTPS")
    Rel(purchases_service, employees_service, "Makes API calls to", "JSON/REST/HTTPS")

    Rel_D(customers_service, customers_db, "reads from and writes to", "JDBC")
    Rel_D(employees_service, employees_db, "reads from and writes to", "JDBC")
    Rel_D(inventory_service, inventory_db, "reads from and writes to", "JDBC")
    Rel_R(purchases_service, purchases_db, "reads from and writes to", "Mongo")

}


@enduml